package com.decadev.entities;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import lombok.Builder;
import lombok.Data;
import lombok.NonNull;

@Data
@DynamoDBTable(tableName = "MyFitPalUsers")

public class User {
    @DynamoDBHashKey(attributeName = "userId")
    @DynamoDBAutoGeneratedKey
    private String userId;

    @DynamoDBIndexHashKey(attributeName = "username", globalSecondaryIndexName = "usernameIndex")
    private String username;

    private String password;

    @DynamoDBAttribute(attributeName = "email")
    private String email;

    @DynamoDBAttribute(attributeName = "gymAccess")
    private GymAccess gymAccess;

    // Fitness assessment attributes
    @DynamoDBAttribute(attributeName = "fitnessGoal")
    private FitnessGoal fitnessGoal;

    @DynamoDBAttribute(attributeName = "fitnessLevel")
    private FitnessLevel fitnessLevel;

    @DynamoDBAttribute(attributeName = "availability")
    private String availability;

    //Explicit constructor for required fields
    public User (@NonNull String userId, @NonNull String username, @NonNull String password,@NonNull String email) {
        this.userId=userId;
        this.username= username;
        this.password=password;
        this.email=email;
    }
    // Default constructor for for DynamoDb
    public User(){}

    //Custom builder method
    public static UserBuilder builder() {
        return new UserBuilder();
    }
    // Static inner class for builder
    public static class UserBuilder {
        private String userId;
        private String username;
        private String password;
        private String email;
        private GymAccess gymAccess;
        private FitnessGoal fitnessGoal;
        private FitnessLevel fitnessLevel;
        private String availability;

        UserBuilder() {}

        // Builder methods for setting properties
        public UserBuilder userId(String userId) { this.userId = userId; return this; }
        public UserBuilder username(String username) { this.username = username; return this; }
        // Add builder methods for all other properties

        public User build() {
            User user = new User(userId, username, password, email);
            user.setGymAccess(gymAccess);
            user.setFitnessGoal(fitnessGoal);
            user.setFitnessLevel(fitnessLevel);
            user.setAvailability(availability);
            return user;
        }
    }
}
